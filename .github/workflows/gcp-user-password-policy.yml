name: "GCP: Get User Password Policies" 

on:
  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   paths:
  #     - '.github/workflows/ps-gcp-get-superadmin-recovery.yml'
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Environment to deploy to
        options:
          - sumvita
          - sumvita-gov
permissions:
  id-token: write
  contents: read

env:
  GCP_SERVICE_ACCOUNT_CLIENT_ID: ${{ vars.GCP_SERVICE_ACCOUNT_CLIENT_ID }}
  GCP_SERVICE_ACCOUNT_SUBJECT_EMAIL: ${{ vars.GCP_SERVICE_ACCOUNT_SUBJECT_EMAIL }}
  GCP_SERVICE_ACCOUNT_EMAIL: ${{ vars.GCP_SERVICE_ACCOUNT_EMAIL }}
  GCP_SERVICE_ACCOUNT_CREDENTIALS_P12_BASE64: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS_P12_BASE64 }}
  GCP_SERVICE_ACCOUNT_CREDENTIALS_P12_PASSWORD: ${{ secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS_P12_PASSWORD }}
  
  PASSWORD_STRENGTH_ENFORCED: ${{ vars.PASSWORD_STRENGTH_ENFORCED }}
  MINIMUM_PASSWORD_LENGTH: ${{ vars.MINIMUM_PASSWORD_LENGTH }}
  MAXIMUM_PASSWORD_LENGTH: ${{ vars.MAXIMUM_PASSWORD_LENGTH }}
  ENFORCE_NEXT_SIGN_IN: ${{ vars.ENFORCE_NEXT_SIGN_IN }}
  PASSWORD_REUSE_ALLOWED: ${{ vars.PASSWORD_REUSE_ALLOWED }}
  PASSWORD_EXPIRATION_DAYS: ${{ vars.PASSWORD_EXPIRATION_DAYS }}


jobs: 
  # alert-upon-prod-deployment:
  #   if: ${{ inputs.environment == 'PROD' }}
  #   uses: ./.github/workflows/prod-deployment-alerts.yml
  #   with:
  #     environment: ${{ inputs.environment || 'kalvico-gcp' }}
  #   secrets: inherit

  gcp-get-superadmin-recovery-policy:
    environment: ${{ inputs.environment || 'sumvita' }}
    runs-on: ubuntu-latest
    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout common module
      uses: actions/checkout@v4
      with:
        repository: 'Sensini7/GCP-Powershell-Enterprise-Identity'
        ref: 'Sensini/GCP-UPP'
        path: 'EZD.ECI.GCP.Common'
        sparse-checkout: 'EZD.ECI.GCP.Common'
        #ssh-key: ${{ secrets.GCP_MODULES_REPO_SSH_PRIVATE_KEY }}

    - name: Checkout feature module
      uses: actions/checkout@v4
      with:
        repository: 'Sensini7/GCP-Powershell-Enterprise-Identity'
        ref: 'Sensini/GCP-UPP'
        path: 'GCP-Org-Password-Policy'
        sparse-checkout: 'GCP-Org-Password-Policy'
        #ssh-key: ${{ secrets.GCP_MODULES_REPO_SSH_PRIVATE_KEY }}

    - name: 'Get User Password Policies'
      shell: pwsh
      run: |-
        Import-Module .\EZD.ECI.GCP.Common\EZD.ECI.GCP.Common\EZD.ECI.GCP.Common.psd1 -Force
        Import-Module .\GCP-Org-Password-Policy\GCP-Org-Password-Policy\GCP-Org-Password-Policy.psd1 -Force

        Write-Host "Starting password policy check..."
        Write-Host "Using service account: $env:GCP_SERVICE_ACCOUNT_EMAIL"

        $Scopes = @("https://www.googleapis.com/auth/cloud-identity.policies.readonly")
        Write-Host "Using scope: $Scopes"

        $AccessTokenSplat = @{
          Issuer = $env:GCP_SERVICE_ACCOUNT_EMAIL
          Subject = $env:GCP_SERVICE_ACCOUNT_SUBJECT_EMAIL
          P12CertificateBase64 = $env:GCP_SERVICE_ACCOUNT_CREDENTIALS_P12_BASE64
          P12CertificatePassword = $env:GCP_SERVICE_ACCOUNT_CREDENTIALS_P12_PASSWORD
          Scopes = $Scopes
        }
        
        Write-Host "Getting access token..."
        $AccessToken = Get-EciGwsAccessToken @AccessTokenSplat
        Write-Host "Access token obtained"
        
        Write-Host "Converting parameters..."
        $DesiredPasswordStrengthEnforced = [System.Convert]::ToBoolean($env:PASSWORD_STRENGTH_ENFORCED)
        $DesiredEnforceNextSignIn = [System.Convert]::ToBoolean($env:ENFORCE_NEXT_SIGN_IN)
        $DesiredPasswordReuseAllowed = [System.Convert]::ToBoolean($env:PASSWORD_REUSE_ALLOWED)
        
        Write-Host "Testing API access..."
        $testSplat = @{
            Method = "GET"
            Uri = "https://cloudidentity.googleapis.com/v1/policies"
            Headers = @{
                Authorization = "Bearer $accesstoken"
                'Content-Type' = 'application/json'
            }
        }
        try {
            $testResponse = Invoke-WebRequest @testSplat
            Write-Host "Basic API test successful"
            Write-Host "Response: $($testResponse.Content)"
        }
        catch {
            Write-Host "Basic API test failed: $_"
        }
            
        Write-Host "Calling Get-PasswordPolicy..."
        Get-PasswordPolicy -DesiredPasswordStrengthEnforced $DesiredPasswordStrengthEnforced -DesiredMinLength $env:MINIMUM_PASSWORD_LENGTH -DesiredMaxLength $env:MAXIMUM_PASSWORD_LENGTH -DesiredEnforceNextSignIn $DesiredEnforceNextSignIn -DesiredPasswordReuseAllowed $DesiredPasswordReuseAllowed -DesiredPasswordExpirationDays $env:PASSWORD_EXPIRATION_DAYS -accessToken $AccessToken
        
